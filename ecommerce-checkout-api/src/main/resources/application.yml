spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/checkout
    username: admin
    password: admin
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-test-query: select 1
  jpa:
    hibernate:
      # none, create-drop  
      ddl-auto: create-drop
    properties:
      hibernate:
        #default_schema: checkout
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        show_sql: true
        use_sql_comments: true
        jdbc:
          lob:
            non_contextual_creation: true
  cloud:
    stream:
      kafka:
        binder:
          # vai criar 1 topico ao subir a aplicacao
          autoCreateTopics: true
          brokers: localhost:9092
          configuration:
            value:
              deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
              serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
            key:
              deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
              serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      bindings:
        # topico virtual do stream source
        checkout-created-output:
          # tipoDeInformaçãoDoTopico(streaming, Idl..).nomeDoDominio.QualEntidade.QualAcão
          destination: streaming.ecommerce.checkout.created
          # O "*"poder ser versionado no lugar do asterisco (v1, v2, v3...)
          contentT ype: application/*+avro
          producer:
            use-native-encoding: true
        payment-paid-input:
          destination: streaming.ecommerce.payment.paid
          contentType: application/*+avro
          group: ${spring.application.name}
          consumer:
            use-native-decoding: true
  kafka:
    properties:
      schema:
        registry:
          url: http://localhost:8081
  #application:
  #  name: checkout-api